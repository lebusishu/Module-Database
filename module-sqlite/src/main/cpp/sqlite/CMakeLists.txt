CMAKE_MINIMUM_REQUIRED(VERSION 3.4.1)
#设置项目的名字
PROJECT(sqliteFTS C CXX)
#输出路径
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../../libs/${ANDROID_ABI})
# If using SEE, uncomment the following:
#set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSQLITE_HAS_CODEC")

#Define HAVE_USLEEP, otherwise ALL sleep() calls take at least 1000ms
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DHAVE_USLEEP=1")

# Enable SQLite extensions.
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} \
-DSQLITE_ENABLE_FTS3 \
-DSQLITE_ENABLE_FTS3_TOKENIZER \
-DSQLITE_ENABLE_FTS3_BACKWARDS \
-DSQLITE_ENABLE_FTS4 \
-DSQLITE_ENABLE_FTS5 \
-DSQLITE_ENABLE_RTREE \
-DSQLITE_ENABLE_JSON1")

#[[
This is important - it causes SQLite to use memory for temp files. Since
Android has no globally writable temp directory, if this is not defined the
application throws an exception when it tries to create a temp file.
]]
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} \
-DSQLITE_TEMP_STORE=3 \
-DHAVE_CONFIG_H -DKHTML_NO_EXCEPTIONS -DGKWQ_NO_JAVA \
-DNO_SUPPORT_JS_BINDING -DQT_NO_WHEELEVENT -DKHTML_NO_XBL \
-U__APPLE__ \
-DHAVE_STRCHRNUL=0 \
-DSQLITE_USE_URI=1")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} \
-Wno-unused-parameter \
-Wno-int-to-pointer-cast \
-Wno-uninitialized \
-Wno-parentheses")

#WC
SET(WC_SQLITE_FLAGS "${CMAKE_C_FLAGS} \
-Wall -Werror -ffunction-sections -fdata-sections -Wno-unused \
-DSQLITE_CORE \
-DSQLITE_OS_UNIX \
-DSQLITE_ENABLE_MEMORY_MANAGEMENT=1 \
-DSQLITE_HAVE_ISNAN \
-DSQLITE_DEFAULT_FILE_FORMAT=4 \
-DSQLITE_THREADSAFE=2 \
-DSQLITE_ENABLE_SESSION \
-DSQLITE_ENABLE_PREUPDATE_HOOK \
-DSQLITE_DEFAULT_WORKER_THREADS=2 \
-DSQLITE_DEFAULT_JOURNAL_SIZE_LIMIT=1048576 \
-DUSE_PREAD64=1 \
-DSQLITE_ENABLE_STAT4 \
-DSQLITE_ENABLE_EXPLAIN_COMMENTS \
-DOMIT_MEMLOCK \
-DOMIT_CONSTTIME_MEM \
-DSQLCIPHER_CRYPTO_OPENSSL \
-DSQLCIPHER_CRYPTO_CUSTOM \
-DSQLCIPHER_CRYPTO_XXTEA \
-DSQLCIPHER_CRYPTO_DEVLOCK")

#Andorid 7.1.1
SET(ANDROID_SQLITE_FLAGS "${WC_SQLITE_FLAGS} \
-Dfdatasync=fdatasync \
-DSQLITE_POWERSAFE_OVERWRITE=1 \
-DSQLITE_OMIT_COMPILEOPTION_DIAGS \
-DSQLITE_OMIT_LOAD_EXTENSION \
-DSQLITE_DEFAULT_FILE_PERMISSIONS=0600 \
-DPIC -fPIC")
#禁止调试 / 发布时加上
#-DSQLITE_UNTESTABLE
#打开自动剪裁
#-DSQLITE_DEFAULT_AUTOVACUUM=1

SET(CMAKE_C_FLAGS "${ANDROID_SQLITE_FLAGS}")

#C++
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-conversion-null")

#release
if (${CMAKE_BUILD_TYPE} STREQUAL "Release")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3 -DSQLITE_UNTESTABLE")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -DSQLITE_UNTESTABLE")
    MESSAGE(build type : Release)
endif ()

if (${CMAKE_ANDROID_ARCH_ABI} STREQUAL "arm")
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DPACKED='__attribute__ ((packed))'")
else ()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DPACKED")
endif ()
#加头文件目录
INCLUDE_DIRECTORIES(.)
INCLUDE_DIRECTORIES(./extra)
INCLUDE_DIRECTORIES(nativehelper)
INCLUDE_DIRECTORIES(${ICU_COMPAT_DIR})
INCLUDE_DIRECTORIES(${ICU_COMPAT_DIR}/unicode)
#当前目录查找源文件赋值给SQLITE_SOURCE
AUX_SOURCE_DIRECTORY(. SQLITE_SOURCE)
#extra目录查找源文件赋值给EXTRA
AUX_SOURCE_DIRECTORY(./extra EXTRA)
#将指定的源文件（C文件）生成链接文件，然后添加到工程中去
ADD_LIBRARY(sqliteFTS SHARED ${SQLITE_SOURCE} ${EXTRA})
#查找系统库，这里查找的是系统日志库，并赋值给变量log-lib
FIND_LIBRARY(liblog log)
FIND_LIBRARY(libdl dl)
#设置要链接的库文件的名称，设置依赖的库（第一个参数必须为目标模块，顺序不能换
TARGET_LINK_LIBRARIES(sqliteFTS icucompat ${liblog} ${libdl})